name: CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-22.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  check-license:
    name: 'Check License'
    runs-on: ubuntu-22.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check License
      run: |
        perl tests/misc/check_license.pl
        
  check-tests:
    name: 'Check Devices Tests'
    runs-on: ubuntu-22.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y python3
    - name: Check Devices Tests
      run: |
        python3 tests/misc/check_tests.py
        
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, macos-latest, windows-2019]
      fail-fast: true

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        conda install -c conda-forge -c robostack-staging ycm-cmake-modules eigen ace sqlite nlohmann_json libpsl


    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp

    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV
        # curl
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/curl/curl.git
        cd curl
        mkdir -p build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        #liboai
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/D7EAD/liboai.git
        cd liboai/liboai
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_POSITION_INDEPENDENT_CODE=true ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}


    - name: Dependencies from source [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        cd yarp
        mkdir build
        cd build
        cmake -G"Visual Studio 16 19" -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                                        -DYARP_COMPILE_TESTS:BOOL=ON \
                                        -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/Library/share/yarp;${YARP_DATA_DIRS}" >> $GITHUB_ENV
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/curl/curl.git
        cd curl
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 19" -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        #liboai
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/D7EAD/liboai.git
        cd liboai/liboai
        mkdir build
        cd build
        cmake -G"Visual Studio 16 19" -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_POSITION_INDEPENDENT_CODE=true ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DLIBOAI_INSTALL_PATH=${GITHUB_WORKSPACE}/liboai \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 19" -DBUILD_TESTING:BOOL=ON \
                                        -DCMAKE_PREFIX_PATH=${CONDA_PREFIX}/Library \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                                        -DLIBOAI_INSTALL_PATH=${GITHUB_WORKSPACE}/liboai \
                                        -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library .. \
                                        -DYARP_COMPILE_TESTS:BOOL=ON
    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Build [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

  build-valgrind:
    name: 'valgrind [ubuntu-latest@Debug@humble@conda]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        # Actual dependencies
        sudo apt update && sudo apt-get install -qq -y libc6-dbg
        conda install -c conda-forge -c robostack-staging ycm-cmake-modules eigen valgrind ace sqlite nlohmann_json libpsl

    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp

    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON \
                      -DYARP_VALGRIND_TESTS:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV
        # curl
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/curl/curl.git
        cd curl
        mkdir -p build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        #liboai
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/D7EAD/liboai.git
        cd liboai/liboai
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_POSITION_INDEPENDENT_CODE=true ..
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DLIBOAI_INSTALL_PATH=${GITHUB_WORKSPACE}/liboai \
                      -DYARP_VALGRIND_TESTS:BOOL=ON \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
